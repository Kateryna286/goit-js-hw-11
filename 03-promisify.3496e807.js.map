{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger1","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,GAEH,IAAIC,QAAQC,GACfC,WAAWC,EAAQJ,EAAIA,IAGzBI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIb,QAASC,IAClBW,EAASE,IAAIC,IACPA,EAAKN,OAASI,GAChBZ,EAAQ,IAAKc,EAAML,QAASK,EAAKL,aAMnCM,EAAUC,GAAgBZ,QAAQa,MAAMD,GAO9CN,EAAgBH,EAAO,SAASD,KAAKF,QAAQa,OAC7CP,EAAgBH,EAAO,QAAQD,KAAKF,QAAQa,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,GACvB,IAAI1B,QAAQ,CAACC,EAAS0B,KACd7B,MAAAA,EAAQqB,EAA0B,IAAK,KAE7CjB,WAAW,KACUoB,KAAKE,SAAW,GAE7BvB,EAAQ,CAAC2B,GAAIF,EAAYE,GAAIxB,KAAMN,IAEnC6B,EAAOD,EAAYE,KAExB9B,KAED+B,EAAa,EAAED,GAAAA,EAAIxB,KAAAA,MACvBC,QAAQC,mBAAmBsB,kBAAmBxB,QAG1C0B,EAAYF,IAChBvB,QAAQ0B,qCAAqCH,+BAW/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMzB,KAAKsB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH","file":"03-promisify.3496e807.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n  // Change this function\n    return new Promise(resolve => \n        setTimeout(logger, ms, ms));\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve) => {\n    allUsers.map(user => {\n      if (user.name === userName) {\n        resolve({ ...user, active: !user.active });\n      }\n    });\n  });\n};\n\nconst logger1 = updatedUsers => console.table(updatedUsers);\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) =>\n  new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n      \n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n        if (canProcess) {\n            resolve({id: transaction.id, time: delay});\n        } else {\n            reject(transaction.id);\n        }\n    }, delay);\n  });\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = (id) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}