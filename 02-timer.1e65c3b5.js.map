{"version":3,"sources":["js/02-timer.js"],"names":["refs","input","document","querySelector","timerDays","timerHours","timerMinutes","timerSeconds","btnStart","Timer","constructor","onTick","intervalId","isActive","start","setInterval","dateEntered","ms","Date","value","getTime","time","convertMs","console","log","pad","String","padStart","days","Math","floor","hour","hours","minute","minutes","second","seconds","timer","updateTextContent","textContent","addEventListener","bind"],"mappings":";AAGA,MAAMA,EAAO,CACTC,MAAOC,SAASC,cAAc,kBAC9BC,UAAWF,SAASC,cAAc,eAClCE,WAAYH,SAASC,cAAc,gBACnCG,aAAcJ,SAASC,cAAc,kBACrCI,aAAcL,SAASC,cAAc,kBACrCK,SAAUN,SAASC,cAAc,iBAGrC,MAAMM,EACFC,aAAY,OAAEC,IACLC,KAAAA,WAAa,KAClB,KAAKC,UAAW,EAChB,KAAKF,OAASA,EAGlBG,QACQ,KAAKD,WAIJA,KAAAA,UAAW,EAEXD,KAAAA,WAAaG,YAAY,KACpBC,MAIAC,EAJc,IAAIC,KAAKlB,EAAKC,MAAMkB,OACTC,UACX,IAAIF,KAGlBG,EAAO,KAAKC,UAAUL,GAC5BM,QAAQC,IAAIH,GAEPV,KAAAA,OAAOU,IACb,MAGPI,IAAIN,GACOO,OAAAA,OAAOP,GAAOQ,SAAS,EAAG,KAGrCL,UAAUL,GAgBC,MAAA,CAAEW,KARI,KAAKH,IAAII,KAAKC,MAAMb,EAHrBc,QAWGC,MAND,KAAKP,IAAII,KAAKC,MAAOb,EALvBc,MADCE,OAYSC,QAJN,KAAKT,IAAII,KAAKC,MAAQb,EAP1Bc,MADCE,KADEE,MAagBC,QAFf,KAAKX,IAAII,KAAKC,MAASb,EAT3Bc,MADCE,KADEE,IADA,QAkBvB,MAAME,EAAQ,IAAI5B,EAAM,CACpBE,OAAQ2B,IAIZ,SAASA,GAAkB,KAAEV,EAAF,MAAQI,EAAR,QAAeE,EAAf,QAAwBE,IAC/CpC,EAAKI,UAAUmC,eAAiBX,IAChC5B,EAAKK,WAAWkC,eAAiBP,IACjChC,EAAKM,aAAaiC,eAAiBL,IACnClC,EAAKO,aAAagC,eAAiBH,IAGvCpC,EAAKQ,SAASgC,iBAAiB,QAASH,EAAMvB,MAAM2B,KAAKJ","file":"02-timer.1e65c3b5.js","sourceRoot":"../src","sourcesContent":["//import '../css/common.css';\n\n\nconst refs = {\n    input: document.querySelector('#date-selector'),\n    timerDays: document.querySelector('[data-days]'),\n    timerHours: document.querySelector('[data-hours]'),\n    timerMinutes: document.querySelector('[data-minutes]'),\n    timerSeconds: document.querySelector('[data-seconds]'),\n    btnStart: document.querySelector('[data-start]'),\n};\n\nclass Timer {\n    constructor({ onTick }) {\n        this.intervalId = null,\n        this.isActive = false,\n        this.onTick = onTick;\n    }\n\n    start() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n\n        this.intervalId = setInterval(() => {\n            const dateEntered = new Date(refs.input.value);\n            const targetDate = dateEntered.getTime()\n            const currentDate = new Date();\n    \n            const ms = targetDate - currentDate;\n            const time = this.convertMs(ms);\n            console.log(time);\n            \n            this.onTick(time);    \n        }, 1000);\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0');\n    }\n\n    convertMs(ms) {\n        // Number of milliseconds per unit of time\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n\n        // Remaining days\n        const days = this.pad(Math.floor(ms / day));\n        // Remaining hours\n        const hours = this.pad(Math.floor((ms % day) / hour));\n        // Remaining minutes\n        const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n        // Remaining seconds\n        const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n        return { days, hours, minutes, seconds };\n    }\n}\n\nconst timer = new Timer({\n    onTick: updateTextContent,\n});\n\n\nfunction updateTextContent({ days, hours, minutes, seconds }) {\n    refs.timerDays.textContent = `${days}`;\n    refs.timerHours.textContent = `${hours}`;\n    refs.timerMinutes.textContent = `${minutes}`;\n    refs.timerSeconds.textContent = `${seconds}`;\n}\n\nrefs.btnStart.addEventListener('click', timer.start.bind(timer));\n\n\n\n\n// const timer = {\n//     intervalId: null,\n//     isActive: false,\n//     start() {\n//         if (this.isActive) {\n//             return;\n//         }\n\n//         this.isActive = true;\n\n//         this.intervalId = setInterval(() => {\n//             const dateEntered = new Date(refs.input.value);\n//             const targetDate = dateEntered.getTime()\n//             const currentDate = new Date();\n    \n//             const ms = targetDate - currentDate;\n//             const time = convertMs(ms);\n//             console.log(time);\n            \n//             updateTextContent(time);\n            \n//         }, 1000);\n//     }\n// };\n\n\n\n// function pad(value) {\n//     return String(value).padStart(2, '0');\n// };\n  \n// function convertMs(ms) {\n//   // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   // Remaining days\n//   const days = Math.floor(ms / day);\n//   // Remaining hours\n//   const hours = Math.floor((ms % day) / hour);\n//   // Remaining minutes\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   // Remaining seconds\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n"]}